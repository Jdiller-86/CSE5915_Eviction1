name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install FreeTDS
        run: sudo apt-get update && sudo apt-get install -y freetds-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Ensure Brakeman is executable
        run: chmod +x bin/brakeman

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Ensure all bin scripts are executable
        run: chmod +x bin/*

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Ensure RuboCop is executable
        run: chmod +x bin/rubocop

      - name: Lint code for consistent style
        run: bin/rubocop -f github
  # Need to add a testSchema and Run a testDB init to get this to work. TODO LATER
  # test:
  #   runs-on: ubuntu-latest

  #   services:
  #     mssql:
  #       image: mcr.microsoft.com/mssql/server:2019-latest
  #       env:
  #         ACCEPT_EULA: Y
  #         SA_PASSWORD: YourStrong@Passw0rd
  #       ports:
  #         - 1433:1433
  #       options: "--memory=2g --health-cmd=\"exit 0\" --health-interval=10s --health-timeout=5s --health-retries=5"

  #   steps:
  #     - name: Install packages
  #       run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git pkg-config google-chrome-stable

  #     - name: Install SQL Server Tools
  #       run: |
  #         curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
  #         sudo add-apt-repository "$(curl -fsSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list)"
  #         sudo apt-get update
  #         sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 mssql-tools unixodbc-dev
  #         echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
  #         source ~/.bashrc

  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: .ruby-version
  #         bundler-cache: true
      
  #     - name: Prepare Database Configuration
  #       run: cp config/database.yml.ci config/database.yml

  #     - name: Ensure all bin scripts are executable
  #       run: chmod +x bin/*

  #     - name: Check SQL Server container status
  #       run: docker ps -a

  #     - name: Check SQL Server logs
  #       run: docker logs $(docker ps -q --filter "ancestor=mcr.microsoft.com/mssql/server:2019-latest")

  #     - name: Wait for SQL Server to be ready
  #       run: |
  #         for i in {1..30}; do
  #           /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -Q 'SELECT 1' && echo "SQL Server is ready!" && exit 0
  #           echo "Waiting for SQL Server to start... attempt $i"
  #           docker logs mssql
  #           sleep 15
  #         done
  #         echo "SQL Server failed to start in time" && exit 1

  #     - name: Create test database
  #       run: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -Q "CREATE DATABASE test_db"

  #     - name: Run tests
  #       env:
  #         RAILS_ENV: test
  #         # REDIS_URL: redis://localhost:6379/0
  #       run: bin/rails db:test:prepare test test:system

  #     - name: Keep screenshots from failed system tests
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: screenshots
  #         path: ${{ github.workspace }}/tmp/screenshots
  #         if-no-files-found: ignore
