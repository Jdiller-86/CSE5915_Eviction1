<h2> <i class="fa-solid fa-user-pen"></i> Update Mediator</h2>
<p>Select a mediator and update their info below.</p>

<%= form_with url: "", method: :patch, local: true, id: "mediator-update-form" do |f| %>

  <!-- Mediator Select -->
  <div class="form-section">
    <%= f.label :mediator_id, "Choose a Mediator:", class: "required-label" %>
    <div class="custom-select-wrapper">
      <%= select_tag :mediator_id, options_for_select([["Select a mediator", ""]] + 
        @mediators.map do |mediator|
          [
            "#{mediator.user.FName} #{mediator.user.LName}",
            mediator.UserID,
            {
              "data-fname": mediator.user.FName,
              "data-lname": mediator.user.LName,
              "data-email": mediator.user.Email,
              "data-cap": mediator.MediationCap
            }
          ]
        end
      ), id: "mediator-select", class: "form-control", required: true %>
      <i class="arrow down"></i>
    </div>
  </div>

  <!-- Display Selected Mediator Info -->
  <div id="selected-mediator-info" style="margin-top: 1rem; display: none;">
    <p><strong>Name:</strong> <span id="mediator-name"></span></p>
    <p><strong>Email:</strong> <span id="mediator-email"></span></p>
  </div>

  <%= hidden_field_tag :id, "", id: "mediator-id" %>

  <!-- Mediation Cap -->
  <div class="form-section">
    <%= f.label :mediation_cap, "Mediation Cap", class: "required-label" %>
    <div class="input-field">
      <i class="fa-solid fa-scale-balanced"></i>
      <%= number_field_tag :mediation_cap, nil, required: true, placeholder: "    Update the maximum number of mediations this mediator can be assigned at any time", class: "signup-input", id: "mediation-cap" %>
    </div>
  </div>

  <!-- New Password -->
  <div class="form-section">
    <%= f.label :password, "New Password", class: "required-label" %>
    <div class="input-field">
      <i class="fa-solid fa-lock"></i>
      <%= password_field_tag :password, nil, placeholder: "    Enter new password", class: "signup-input", id: "password-update" %>
    </div>
  </div>

  <!-- Confirm Password -->
  <div class="form-section">
    <%= f.label :password_confirmation, "Confirm Password", class: "required-label" %>
    <div class="input-field">
      <i class="fa-solid fa-lock"></i>
      <%= password_field_tag :password_confirmation, nil, placeholder: "    Confirm new password", class: "signup-input", id: "password-confirmation-update" %>
    </div>
    <p id="password-warning-update" style="color: red; display: none;">⚠️ Passwords do not match</p>
  </div>

  <%= submit_tag "Update Mediator", class: "signup-btn" %>
<% end %>

<%# Script for password confirmation and displaying mediator details after being selected #%>
<script>
  document.addEventListener("turbo:load", () => {
    const dropdown = document.getElementById("mediator-select");
    const nameEl = document.getElementById("mediator-name");
    const emailEl = document.getElementById("mediator-email");
    const infoBlock = document.getElementById("selected-mediator-info");

    const form = document.getElementById("mediator-update-form");
    const mediatorIdField = document.getElementById("mediator-id");
    const mediationCapField = document.getElementById("mediation-cap");
    const password = document.getElementById("password");
    const confirmation = document.getElementById("password-confirmation");
    const warning = document.getElementById("password-warning");

    function resetForm() {
      dropdown.value = "";
      form.action = "";
      mediatorIdField.value = "";
      mediationCapField.value = "";
      password.value = "";
      confirmation.value = "";
      warning.style.display = "none";
      infoBlock.style.display = "none";
    }

    function checkPasswordMatch() {
      // If password is filled in, require confirmation to match
      if (password.value !== "" && confirmation.value !== password.value) {
        warning.style.display = "block";
        return false;
      } else {
        warning.style.display = "none";
        return true;
      }
    }

    password.addEventListener("input", checkPasswordMatch);
    confirmation.addEventListener("input", checkPasswordMatch);

    form.addEventListener("submit", function (e) {
      // Only validate if password is being changed
      if (password.value !== "" && !checkPasswordMatch()) {
        e.preventDefault();
      } else {
        window.location.hash = "reset"; // for reset on reload
      }
    });

    dropdown.addEventListener("change", () => {
      const selected = dropdown.selectedOptions[0];
      if (!selected.value) {
        resetForm();
        return;
      }

      const id = selected.value;
      const fname = selected.dataset.fname;
      const lname = selected.dataset.lname;
      const email = selected.dataset.email;
      const cap = selected.dataset.cap;

      nameEl.textContent = `${fname} ${lname}`;
      emailEl.textContent = email;
      infoBlock.style.display = "block";

      form.action = `/admin/accounts/${id}`;
      mediatorIdField.value = id;
      mediationCapField.value = cap;

      password.value = "";
      confirmation.value = "";
      warning.style.display = "none";
    });

    if (window.location.hash === "#reset") {
      resetForm();
      history.replaceState(null, null, window.location.pathname);
    }
  });
</script>

