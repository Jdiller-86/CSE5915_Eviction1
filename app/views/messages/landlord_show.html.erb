<div class="mediation-container">
  <h1>Negotiation Conversation with Tenant</h1>
  <p>Welcome, <%= @user.FName %>! Here is the negotiation conversation.</p>

  <div class="message-page-container">
    <div class="message-list-container">
      <div class="message-list" 
          id="messages" 
          data-conversation-id="<%= @message_string.ConversationID %>"
          data-current-user-id="<%= @user.UserID %>"
          data-current-user-role="<%= @user.Role %>">

        <% if @messages.any? %>
          <% @messages.each do |message| %>
            <%= render partial: "messages/message", locals: { message: message, user: @user } %>
          <% end %>
        <% else %>
          <!-- Placeholder when there are no messages -->
          <p class="no-messages">No messages in this conversation yet.</p>
        <% end %>
      </div>

      <div id="new_message_form" class="message-input-form">
        <%= form_with url: messages_path, method: :post, data: { turbo: "false" } do |f| %>
          <div class="message-input">
            <%= f.hidden_field :ConversationID, value: @message_string.ConversationID, id: "conversation_id" %>
            <%= f.text_area :Contents, placeholder: "Type your message...", id: "message_contents", class: "message-textarea" %>
            <%= f.submit "Send Message", class: "send-btn" %>
          </div>
        <% end %>
      </div>
    </div>
    <div class="actions-container">
      <div class="mediator-action">
        <% if @mediation && !@mediation.MediatorRequested && !@mediation.MediatorAssigned %>
          <%= button_to "Request a Mediator", request_mediator_message_path(@mediation.id),
                      method: :patch, class: "btn btn-primary" %>
          <p class="action-description">
            If negotiations are not progressing, you can request a mediator to assist with resolving the dispute.
          </p>
        <% elsif @mediation && @mediation.MediatorRequested && !@mediation.MediatorAssigned %>
          <p class="mediator-status">Mediator requested.</p>
          <p class="action-description">
            Your request for mediation is being processed.
          </p>
        <% elsif @mediation && @mediation.MediatorRequested && @mediation.MediatorAssigned %>
            <p class="mediator-status">Mediator Assigned!</p>
            <% if @user.Role == "Tenant" && @mediation.TenantScreeningID.nil? %>
              <p class="screening-alert">
                You must complete your screening questions before proceeding with mediation.
                <a href="<%= new_screening_path(conversation_id: @message_string.ConversationID)%>">Click here to complete screening.</a>             
                </p>
            <% elsif @user.Role == "Landlord" && @mediation.LandlordScreeningID.nil? %>
              <p class="screening-alert">
                You must complete your screening questions before proceeding with mediation.
                <a href="<%= new_screening_path(conversation_id: @message_string.ConversationID)%>">Click here to complete screening.</a>
                </p>
            <% end %>
        <% else %>
          <p class="mediator-status">unknown error.</p>
        <% end %>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("turbo:load", () => {
      const form = document.querySelector("#new_message_form form");
    
      if (!form) return; // Ensure the form exists before proceeding
    
      // Remove any existing event listeners before adding a new one
      form.removeEventListener("submit", handleSubmit);
      form.addEventListener("submit", handleSubmit);
    });
    
    function handleSubmit(e) {
      e.preventDefault();
      
      const form = e.target;
      const input = document.getElementById("message_contents");
      const submitButton = form.querySelector("input[type='submit']");
    
      // Disable submit button to prevent multiple submissions
      if (submitButton.disabled) {
        console.warn("Message submission blocked: already in progress.");
        return;
      }
      submitButton.disabled = true;
    
      fetch(form.action, {
        method: "POST",
        headers: { "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content },
        body: new FormData(form)
      }).then(response => {
        submitButton.disabled = false; // Re-enable after response
        if (response.status === 204) {
          console.log("Message sent successfully (204 No Content).");
          input.value = "";
          form.reset();
        } else if (response.ok) {
          return response.json().then(data => {
            console.log("Message sent successfully:", data);
            input.value = "";
            form.reset();
          });
        } else {
          return response.json().then(data => {
            throw new Error(data.error || "Failed to send message.");
          });
        }
      }).catch(error => {
        submitButton.disabled = false; // Re-enable on error
        console.error("Error sending message:", error);
      });
    }
  </script>
</div>
