# <div class="mediation-container">
#   <h1>Negotiation Conversation with Landlord</h1>
#   <p>Welcome, <%= @user.FName %>! Here is the negotiation conversation.</p>

#   <div class="message-page-container">
#     <% mediator_screening_needed = @mediation&.MediatorRequested && @mediation&.MediatorAssigned &&
#       ((@user.Role == "Tenant" && @mediation.TenantScreeningID.nil?) ||
#       (@user.Role == "Landlord" && @mediation.LandlordScreeningID.nil?)) %>

#     <% if mediator_screening_needed %>
#       <%= render 'mediator_requested' %>
#     <% else %>
#       <%= render 'chatbox' %>
#     <% end %>

#     <div class="actions-container">
#       <div class="mediator-action">
#         <% if @mediation && !@mediation.MediatorRequested && !@mediation.MediatorAssigned %>
#           <%= button_to "Request a Mediator", request_mediator_message_path(@mediation.id),
#                         method: :patch, class: "btn btn-primary" %>
#           <p class="action-description">
#             If negotiations are not progressing, you can request a mediator to assist with resolving the dispute.
#           </p>
#         <% elsif @mediation && @mediation.MediatorRequested && !@mediation.MediatorAssigned %>
#           <p class="mediator-status">Mediator requested.</p>
#           <p class="action-description">
#             Your request for mediation is being processed.
#           </p>
#         <% elsif @mediation && @mediation.MediatorRequested && @mediation.MediatorAssigned %>
#           <!-- No additional content needed here, as screening prompt is above -->
#         <% else %>
#           <p class="mediator-status">unknown error.</p>
#         <% end %>
#       </div>
#     </div>
#   </div>

#   <script>
#     document.addEventListener("turbo:load", () => {
#       const form = document.querySelector("#new_message_form form");
    
#       if (!form) return; // Ensure the form exists before proceeding
    
#       // Remove any existing event listeners before adding a new one
#       form.removeEventListener("submit", handleSubmit);
#       form.addEventListener("submit", handleSubmit);
#     });
    
#     function handleSubmit(e) {
#       e.preventDefault();
      
#       const form = e.target;
#       const input = document.getElementById("message_contents");
#       const submitButton = form.querySelector("input[type='submit']");
    
#       // Disable submit button to prevent multiple submissions
#       if (submitButton.disabled) {
#         console.warn("Message submission blocked: already in progress.");
#         return;
#       }
#       submitButton.disabled = true;
    
#       fetch(form.action, {
#         method: "POST",
#         headers: { "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content },
#         body: new FormData(form)
#       }).then(response => {
#         submitButton.disabled = false; // Re-enable after response
#         if (response.status === 204) {
#           console.log("Message sent successfully (204 No Content).");
#           input.value = "";
#           form.reset();
#         } else if (response.ok) {
#           return response.json().then(data => {
#             console.log("Message sent successfully:", data);
#             input.value = "";
#             form.reset();
#           });
#         } else {
#           return response.json().then(data => {
#             throw new Error(data.error || "Failed to send message.");
#           });
#         }
#       }).catch(error => {
#         submitButton.disabled = false; // Re-enable on error
#         console.error("Error sending message:", error);
#       });
#     }
#   </script>
# </div>
